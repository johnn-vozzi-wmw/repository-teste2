--SQLSERVER

IF OBJECT_ID('PRWVCRIAINDICESTABELA', 'P') IS NOT NULL
BEGIN
	DROP PROCEDURE PRWVCRIAINDICESTABELA;
END;
GO

CREATE PROCEDURE PRWVCRIAINDICESTABELA
(
	@TABELAS NVARCHAR(1000),
	@RETORNO NVARCHAR(4000) OUTPUT
) AS
BEGIN

	-- VARIAVEIS PARA TRATAMENTO DOS INDICES
	DECLARE @ISRECRIAINDEX			BIT = 0,
			@ISINDICEEXISTE			BIT = 0,
			@ISPERMITECRIACAO		BIT = 0,
			@NMTABELA				NVARCHAR(128),
			@SQL					NVARCHAR(MAX),
			@INDICECRIADO			NVARCHAR(1000),
			@TABELASEMSUPORTE		NVARCHAR(1000);

	-- VARIAVEIS PARA TRATAMENTO DE ERROS
	DECLARE @ERRORNUM               INT,
            @ERRORMSG               VARCHAR(4000);

	DECLARE TABELAS CURSOR LOCAL FOR
		SELECT Split.a.value('.', 'VARCHAR(100)') AS String  
		FROM
		(
			SELECT  
				CAST ('<M>' + REPLACE(REPLACE(@TABELAS, ' ', ''), ';', '</M><M>') + '</M>' AS XML) AS String  
		) AS A CROSS APPLY String.nodes ('/M') AS Split(a)
	OPEN TABELAS
	FETCH NEXT FROM TABELAS INTO @NMTABELA
	WHILE @@FETCH_STATUS = 0
	BEGIN

		BEGIN TRY

			SET @ISRECRIAINDEX = 0;
			SET @ISINDICEEXISTE = 0;
			SET @ISPERMITECRIACAO = 0;

			-- VARIFICA SE A TABELA TEM SUPORTE PARA INDICE DE SYNC
			SELECT
				TOP (1) @ISPERMITECRIACAO = 1
			FROM SYS.COLUMNS C
			WHERE
				OBJECT_NAME(OBJECT_ID) = 'TBLVP' + @NMTABELA
			AND NAME LIKE 'CDUSUARIO'

			-- VERIFICA SE O INDICE EXISTE
			IF @ISPERMITECRIACAO = 1
			BEGIN
				SELECT
					TOP (1) @ISINDICEEXISTE = 1 FROM SYS.INDEXES
				WHERE
					NAME LIKE 'IDX_SYNC_' + @NMTABELA
				AND	OBJECT_NAME(OBJECT_ID) LIKE 'TBLVP' + @NMTABELA;
			END

			-- VERIFICA SE O INDICE PRECISA SER RECRIADO
			IF @ISINDICEEXISTE = 1
			BEGIN

				WITH CTE AS
				(
					SELECT
						C.NAME AS NMCOLUNA, IDX.NMCOLUNAIDX
					FROM SYS.COLUMNS C
					LEFT JOIN
					(
						SELECT
							C.NAME AS NMCOLUNAIDX
						FROM SYS.INDEX_COLUMNS IC
						JOIN SYS.INDEXES I
							ON IC.INDEX_ID = I.INDEX_ID
							AND IC.OBJECT_ID = I.OBJECT_ID
						JOIN SYS.COLUMNS C
							ON C.OBJECT_ID = IC.OBJECT_ID
							AND C.COLUMN_ID = IC.COLUMN_ID
							AND IC.IS_INCLUDED_COLUMN = 1
						WHERE
							I.NAME LIKE 'IDX_SYNC_' + @NMTABELA
						AND	OBJECT_NAME(I.OBJECT_ID) LIKE 'TBLVP' + @NMTABELA
					) IDX ON C.NAME = IDX.NMCOLUNAIDX
					WHERE
						OBJECT_NAME(OBJECT_ID) LIKE 'TBLVP' + @NMTABELA
					AND NAME NOT IN (
						SELECT
							C.NAME AS NMCOLUNA
						FROM SYS.INDEX_COLUMNS IC
						JOIN SYS.INDEXES I
							ON IC.INDEX_ID = I.INDEX_ID
							AND IC.OBJECT_ID = I.OBJECT_ID
						JOIN SYS.COLUMNS C
							ON C.OBJECT_ID = IC.OBJECT_ID
							AND C.COLUMN_ID = IC.COLUMN_ID
							AND IC.IS_INCLUDED_COLUMN = 0
						WHERE
							I.NAME LIKE 'IDX_SYNC_' + @NMTABELA
						AND	OBJECT_NAME(I.OBJECT_ID) LIKE 'TBLVP' + @NMTABELA
					)
					AND NAME NOT IN ('NUCARIMBO', 'DTALTERACAO', 'HRALTERACAO', 'CDUSUARIO')
					AND C.USER_TYPE_ID NOT IN (34, 35, 99)
				)
				SELECT
					TOP (1) @ISRECRIAINDEX = 1
				FROM CTE
				WHERE
					NMCOLUNAIDX IS NULL;

			END

			IF ((@ISRECRIAINDEX = 1 OR @ISINDICEEXISTE = 0) AND @ISPERMITECRIACAO = 1)
			BEGIN

				-- SYNC - DROPA INDICE QUE PRECISA SER RECRIADO
				IF @ISINDICEEXISTE = 1
				BEGIN
					SET @SQL = 'DROP INDEX IDX_SYNC_' + @NMTABELA + ' ON dbo.TBLVP' + @NMTABELA + ';';
					EXECUTE (@SQL);
				END

				-- SYNC - CRIA INDICE
				SET @SQL = 'CREATE   INDEX IDX_SYNC_' + @NMTABELA + ' ON dbo.TBLVP' + @NMTABELA + ' ( CDUSUARIO ASC ) ';
				SET @SQL = @SQL + 'INCLUDE (' + STUFF((
										SELECT
											', ' + C.NAME AS [INCLUDE]
										FROM SYS.COLUMNS C
										WHERE
											OBJECT_NAME(OBJECT_ID) LIKE 'TBLVP' + @NMTABELA
										AND C.NAME NOT IN ('NUCARIMBO', 'DTALTERACAO', 'HRALTERACAO', 'CDUSUARIO')
										AND C.USER_TYPE_ID NOT IN (34, 35, 99)
										FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '') + ' )'
				EXEC (@SQL);

				SET @INDICECRIADO = CONCAT(@INDICECRIADO, @NMTABELA, ', ');

			END;

			IF @ISPERMITECRIACAO = 0
			BEGIN
				SET @TABELASEMSUPORTE = CONCAT(@TABELASEMSUPORTE, @NMTABELA, ', ');
			END

			SET @ISINDICEEXISTE = 0;

			SELECT
				TOP (1) @ISINDICEEXISTE = 1 FROM SYS.INDEXES
			WHERE
				NAME LIKE 'IDX_SYNC_CARIMBO_' + @NMTABELA
			AND	OBJECT_NAME(OBJECT_ID) LIKE 'TBLVP' + @NMTABELA;

			IF @ISINDICEEXISTE = 0
			BEGIN
				-- CARIMBO - CRIA INDICE
				SET @SQL = 'CREATE INDEX IDX_SYNC_CARIMBO_' + @NMTABELA + ' ON dbo.TBLVP' + @NMTABELA + ' ( NUCARIMBO ASC );';
				EXEC (@SQL);
			END
	
		END TRY
		BEGIN CATCH

			SET @ERRORNUM = ISNULL(@ERRORNUM, ERROR_NUMBER());
			SET @ERRORMSG = ISNULL(@ERRORMSG, ERROR_MESSAGE());

			SET @RETORNO = 'PROBLEMAS AO CRIAR INDICE' + @ERRORMSG + ' - ' + CAST(@ERRORNUM AS VARCHAR(20))

		END CATCH

	FETCH NEXT FROM TABELAS INTO @NMTABELA
	END

	IF CURSOR_STATUS ('LOCAL', 'TABELAS') >= 1
	BEGIN
		CLOSE TABELAS
		DEALLOCATE TABELAS
	END

	IF @RETORNO IS NULL
	BEGIN
		SET @RETORNO = 'OK';
	END
	-- TRATAMENTO DA VARIAVEL DE RETORNO - INDICES CRIADOS/RECRIADOS
	IF @INDICECRIADO IS NOT NULL
	BEGIN
		SET @RETORNO = CONCAT(@RETORNO, ' - INDICES CRIADOS: ', LEFT(@INDICECRIADO, LEN(@INDICECRIADO)-1));
	END;

	-- TRATAMENTO DA VARIAVEL DE RETORNO - TABELAS SEM SUPORTE
	IF @TABELASEMSUPORTE IS NOT NULL
	BEGIN
		SET @RETORNO =  CONCAT(@RETORNO, ' - INDICES INVALIDOS: ', LEFT(@TABELASEMSUPORTE, LEN(@TABELASEMSUPORTE)-1));
	END;
	
	IF (@INDICECRIADO IS NULL AND @TABELASEMSUPORTE IS NULL)
	BEGIN
		SET @RETORNO = CONCAT(@RETORNO, ' - NENHUM INDICE AFETADO');
	END

END
GO

--/SQLSERVER


--ORACLE

CREATE OR REPLACE PROCEDURE PRWVCRIAINDICESTABELA
(
    TABELAS                                          VARCHAR,
    RETORNO                                          OUT VARCHAR
)
IS

    -- VARIAVEIS
    ISINDICEEXISTE                                       INT;
    ISPERMITECRIACAO                                     INT;
    ISCOLUNAINDEXADA                                     INT;
    INDICECRIADO                                         VARCHAR(1000);
    TABELASEMSUPORTE                                     VARCHAR(1000);
                
    -- VARIAVEIS PARA TRATAR OS ERROS       
    V_ERROR_CODE                                         NUMBER;
    V_ERROR_MESSAGE                                      VARCHAR(4000);
                  
BEGIN

  FOR I IN
  (
    SELECT REGEXP_SUBSTR(TABELAS,'[^;]+', 1, LEVEL) AS TABELA FROM DUAL
    CONNECT BY REGEXP_SUBSTR(TABELAS, '[^;]+', 1, LEVEL) IS NOT NULL
  ) LOOP
  BEGIN
  
    ISPERMITECRIACAO := 0;
    ISINDICEEXISTE := 0;
    ISCOLUNAINDEXADA := 0;
  
    SELECT
      NVL(MAX(1), 0) INTO ISPERMITECRIACAO
      FROM USER_TAB_COLUMNS
    WHERE
        TABLE_NAME = 'TBLVP' || I.TABELA
    AND COLUMN_NAME = 'CDUSUARIO';
    
    IF ISPERMITECRIACAO = 0 THEN
    
      TABELASEMSUPORTE := (TABELASEMSUPORTE || I.TABELA || ', ');
    
    ELSE
      
      SELECT
        NVL(MAX(1), 0) INTO ISINDICEEXISTE
      FROM USER_INDEXES
      WHERE
          INDEX_NAME = SUBSTR(('IDX_SYNC_' || I.TABELA), 1, 30);
    
    END IF;
    
    IF ISINDICEEXISTE = 0 THEN
    
      SELECT
        NVL(MAX(1), 0) INTO ISCOLUNAINDEXADA
      FROM USER_IND_COLUMNS
      WHERE
          TABLE_NAME = 'TBLVP' || I.TABELA
      AND COLUMN_NAME = 'CDUSUARIO'
      AND INDEX_NAME NOT LIKE 'PK_%';
      
    END IF;
    
    IF ISPERMITECRIACAO = 1 AND ISINDICEEXISTE = 0 AND ISCOLUNAINDEXADA = 0 THEN
    
      EXECUTE IMMEDIATE ('CREATE INDEX ' || SUBSTR(('IDX_SYNC_' || I.TABELA), 1, 30) || ' ON TBLVP' || I.TABELA || ' (CDUSUARIO)');
      
      INDICECRIADO := (INDICECRIADO || I.TABELA || ', ');

    END IF;
    
    ISPERMITECRIACAO := 0;
    ISINDICEEXISTE := 0;
    ISCOLUNAINDEXADA := 0;
  
    SELECT
      NVL(MAX(1), 0) INTO ISPERMITECRIACAO
      FROM USER_TAB_COLUMNS
    WHERE
        TABLE_NAME = 'TBLVP' || I.TABELA
    AND COLUMN_NAME = 'NUCARIMBO';
    
    IF ISPERMITECRIACAO = 1 THEN
      
      SELECT
        NVL(MAX(1), 0) INTO ISINDICEEXISTE
      FROM USER_INDEXES
      WHERE INDEX_NAME = SUBSTR(('IDX_SYNC_CAR_' || I.TABELA), 1, 30);
    
    END IF;
    
    IF ISINDICEEXISTE = 0 THEN
    
      SELECT
        NVL(MAX(1), 0) INTO ISCOLUNAINDEXADA
        FROM USER_IND_COLUMNS
      WHERE
          TABLE_NAME = 'TBLVP' || I.TABELA
      AND COLUMN_NAME = 'NUCARIMBO';
    END IF;
    
    IF ISPERMITECRIACAO = 1 AND ISINDICEEXISTE = 0 AND ISCOLUNAINDEXADA = 0 THEN
    
      EXECUTE IMMEDIATE ('CREATE INDEX ' || SUBSTR(('IDX_SYNC_CAR_' || I.TABELA), 1, 30) || ' ON TBLVP' || I.TABELA || ' (NUCARIMBO)');
    
    END IF;
    
    EXCEPTION
    WHEN OTHERS THEN
    BEGIN
    
      V_ERROR_CODE := SQLCODE;
      V_ERROR_MESSAGE :=  'ERRO: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      
      RETORNO := REPLACE(REPLACE(('PROBLEMAS AO CRIAR INDICE ' || SUBSTR(('IDX_SYNC_CAR_' || I.TABELA), 1, 30) || ' - ' || V_ERROR_MESSAGE || ' - ' || V_ERROR_CODE), CHR(10), ''), CHR(13), '');
      
    END;
      
  END;
  
  END LOOP;
  
  IF RETORNO IS NULL THEN
		RETORNO := 'OK';
	END IF;
  
	-- TRATAMENTO DA VARIAVEL DE RETORNO - INDICES CRIADOS
	IF INDICECRIADO IS NOT NULL THEN
		RETORNO := (RETORNO || ' - INDICES CRIADOS: ' || SUBSTR(INDICECRIADO, 1, LENGTH(INDICECRIADO)-2));
	END IF;
  
  -- TRATAMENTO DA VARIAVEL DE RETORNO - TABELAS SEM SUPORTE
	IF TABELASEMSUPORTE IS NOT NULL THEN
		RETORNO := (RETORNO || ' - INDICES INVALIDOS: ' || SUBSTR(TABELASEMSUPORTE, 1, LENGTH(TABELASEMSUPORTE)-2));
	END IF;
	
	IF (INDICECRIADO IS NULL AND TABELASEMSUPORTE IS NULL) THEN
		RETORNO := (RETORNO || ' - NENHUM INDICE AFETADO');
	END IF;
  
END;

--/ORACLE